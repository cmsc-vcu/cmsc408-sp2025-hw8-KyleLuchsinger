---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-KyleLuchsinger>


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
run_sql_and_return_html(cnx,"""
select 
  *
from 
  world_bank_data.wdi_country
where 
  `2-alpha code` regexp '[0-9]'
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
drop table if exists sp25_luchsingerkr_user.wdi_country;
""")
```

```{python}
# create table
execute_ddl(cnx,"""
create table sp25_luchsingerkr_user.wdi_country as
select 
  *
from 
  world_bank_data.wdi_country
where 
  Region is not NULL
""")
```

```{python}
# show number of records
run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  sp25_luchsingerkr_user.wdi_country
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  sp25_luchsingerkr_user.wdi_country
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
select distinct 
  Region
from 
  sp25_luchsingerkr_user.wdi_country
order by
  Region
""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select
  Region, count(*) AS country_count
from 
  sp25_luchsingerkr_user.wdi_country
group by
  Region
order by
  Region
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select
  `Long Name`, Region
from
  sp25_luchsingerkr_user.wdi_country
where
  Region = 'North America'
order by
  `Long Name`
""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select
  Region, `Short Name`, `Long Name`
from
  sp25_luchsingerkr_user.wdi_country
where
  `short name` = 'Qatar'
""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select
  `Country Code`, `Short Name`, `2-alpha code` as abbr, `WB-2 code` as wb_abbr, Region
from
  sp25_luchsingerkr_user.wdi_country
where
  `2-alpha code` <> `WB-2 code`
order by
  `Short Name`
""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select
  `Income Group`, count(*) as country_count
from
  sp25_luchsingerkr_user.wdi_country
group by
  `Income Group`
order by
  country_count desc

""")

```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
select
  `Short Name`, `Long Name`, Region, `Income Group`
from
  sp25_luchsingerkr_user.wdi_country
where
  `Income Group` is NULL
""")

```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx,"""
update
  sp25_luchsingerkr_user.wdi_country
set
  `Income Group` = 'High income'
where
  `Income Group` is NULL;

commit;
""")
```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx,"""
select
  `Short Name`, `Long Name`, Region, `Income Group`
from
  sp25_luchsingerkr_user.wdi_country
where
  `Short Name` = 'Venezuela'
""")

```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select
  Region, `Income Group`, count(*) as num_of_countries
from
  sp25_luchsingerkr_user.wdi_country
where
  Region is not NULL and `Income Group` is not NULL
group by
  Region, `Income Group`
order by
  Region, `Income Group`
""")

```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
select
  Region,
  SUM(CASE WHEN `Income Group` = 'High income' THEN 1 ELSE 0 END) AS 'High income',
  SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN 1 ELSE 0 END) AS 'Upper middle income',
  SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN 1 ELSE 0 END) AS 'Lower middle income',
  SUM(CASE WHEN `Income Group` = 'Low income' THEN 1 ELSE 0 END) AS 'Low income',
  count(*) AS 'Total'
from
  sp25_luchsingerkr_user.wdi_country
where
  Region is not NULL
group by
  Region
order by
  Region
""")

```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
select
  count(*) as count, Region, `Income Group`
from
  sp25_luchsingerkr_user.wdi_country
where
  `Income Group` = 'Low income'
group by
  Region, `Income Group`
order by
  count desc
limit 1
""")

```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
select
  `Country Code`, `Short Name`, Region, `Income Group`
from
  sp25_luchsingerkr_user.wdi_country
where
  Region = (select Region from sp25_luchsingerkr_user.wdi_country where `Country Code` = 'MHL')
  and `Income Group` = (select `Income Group` from sp25_luchsingerkr_user.wdi_country where `Country Code` = 'MHL')
order by
  `Short Name`
""")

```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
select 
  r.Region, 
  i.`Income Group`
from 
  (select distinct Region from sp25_luchsingerkr_user.wdi_country where Region is not null) r
cross join
  (select distinct `Income Group` from sp25_luchsingerkr_user.wdi_country where `Income Group` is not null) i
where 
  not exists (
    select 1 
    from sp25_luchsingerkr_user.wdi_country c
    where c.Region = r.Region 
    and c.`Income Group` = i.`Income Group`
  )
order by 
  r.Region, i.`Income Group`
""")

```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
select
  c.Region,
  c.`Income Group`,
  count(*) as country_count,
  (select count(*) from sp25_luchsingerkr_user.wdi_country where Region = c.Region) as region_total,
  (select count(*) from sp25_luchsingerkr_user.wdi_country where `Income Group` = c.`Income Group`) as income_total,
  (select count(*) from sp25_luchsingerkr_user.wdi_country) as grand_total,
  round(count(*) / (select count(*) from sp25_luchsingerkr_user.wdi_country) * 100, 2) as percent_of_total
from
  sp25_luchsingerkr_user.wdi_country c
where
  c.Region is not null
  and c.`Income Group` is not null
group by
  c.Region, c.`Income Group`
order by
  c.Region, c.`Income Group`
""")


```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
with region_income_counts as (
  select
    c.Region,
    c.`Income Group`,
    count(*) as country_count,
    (select count(*) from sp25_luchsingerkr_user.wdi_country) as grand_total
  from
    sp25_luchsingerkr_user.wdi_country c
  where
    c.Region is not null
    and c.`Income Group` is not null
  group by
    c.Region, c.`Income Group`
)

select
  Region,
  round(sum(case when `Income Group` = 'High income' then country_count else 0 end) / grand_total * 100, 1) as 'High income',
  round(sum(case when `Income Group` = 'Upper middle income' then country_count else 0 end) / grand_total * 100, 1) as 'Upper middle income',
  round(sum(case when `Income Group` = 'Lower middle income' then country_count else 0 end) / grand_total * 100, 1) as 'Lower middle income',
  round(sum(case when `Income Group` = 'Low income' then country_count else 0 end) / grand_total * 100, 1) as 'Low income',
  round(sum(country_count) / grand_total * 100, 1) as 'Total'
from
  region_income_counts
group by
  Region, grand_total
order by
  Region
""")

```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
with income_counts as (
  select
    c.`Income Group`,
    count(*) as country_count,
    (select count(*) from sp25_luchsingerkr_user.wdi_country where `Income Group` is not null) as income_total,
    (select count(*) from sp25_luchsingerkr_user.wdi_country) as grand_total
  from
    sp25_luchsingerkr_user.wdi_country c
  where
    c.`Income Group` is not null
  group by
    c.`Income Group`
)

select
  `Income Group`,
  country_count as 'Number of Countries',
  income_total as 'Total Countries with Income Data',
  grand_total as 'Grand Total Countries',
  round(country_count / income_total * 100, 1) as 'Percent of Income-Classified Countries',
  round(country_count / grand_total * 100, 1) as 'Percent of All Countries'
from
  income_counts
order by
  `Income Group`;
""")

```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

Looking back at these exercises, I've definitely grown more confident with several SQL skills. My strongest areas now are basic queries (SELECT, WHERE, ORDER BY) and aggregations (COUNT, GROUP BY). I felt especially comfortable with the filtering tasks and crafting WHERE clauses.
I still need more practice with some of the advanced techniques we used later in the assignment. The CROSS JOIN in task 18 was challenging, and building the percentage tables with multiple subqueries in later tasks stretched my abilities. While I got them working, I think I could be more efficient with my query structure.
This assignment really reinforced my understanding of subqueries. Going from simple subqueries in the earlier tasks to more complex nested ones in the later tasks showed me how powerful they can be when used correctly.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

For the complex tasks, I used a step-by-step approach. For instance, with task 18 (finding missing region-income combinations), I first broke it down conceptually:

- I needed all possible combinations of regions and income groups
- I needed to identify which combinations actually existed in the data
- Then I needed to find the difference between the two sets

I initially struggled with how to create all possible combinations until I realized a CROSS JOIN was the perfect solution. When I hit challenges, I would try to solve simpler versions of the problem first before adding complexity.
For the percentage tables in tasks 23 and 24, I started by ensuring I had the correct counts before attempting to calculate percentages. This helped me avoid errors in the final calculations.
In the future, I would sketch out my query structure on paper first for complex problems like these. I would also test each subquery separately to make sure they're returning the expected results before combining them.


3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

The biggest takeaway for me was seeing how SQL can transform raw data into meaningful insights. Moving from basic counts to percentage distributions showed me how powerful SQL can be for data analysis, not just data retrieval.
I also learned how CTEs (Common Table Expressions) can make complex queries more readable and maintainable. The pivot table technique we used in task 23 to reshape the data was particularly eye-opening.
These skills will definitely apply in real-world data analysis scenarios. Being able to quickly analyze data distributions across multiple dimensions is essential for business intelligence, and the percentage calculations we did are fundamental for any kind of comparative analysis.
I can see myself using these techniques in future coursework when analyzing research data, and they would be invaluable in a business setting for creating executive dashboards or identifying market trends.


# README

A quality README is an important part of EVERY project. Using the Quarto *include* command we're including a copy of your README in the project report so that a human can evaluate it.

Make sure that you edit the README so that it's explanatory!  Note that you don't need a readme within the *reports* folder for this assignment. We're only
focused on the root *README.md*.

[Here is some info](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/) on how to write a good README!

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

